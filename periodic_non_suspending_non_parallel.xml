<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>///Time type
typedef int[0,1000000000] time_t;

///Model Parameters
const int N = 7;            ///Number of tasks
const int M = 1;            ///Number of processors(threads)
const int K = 306;          ///Max amount of segments in one task
const time_t PER[N] =       ///Periods of each task
{    
    200000000,
    20000000,
    50000000,
    5000000,
    2000000,
    100000000,
    1000000000
};

///Auxillaries
///Returns the largest value of lst
time_t max(time_t lst[N])
{
    time_t res;
    for(i : int[0,N-1])
    {
        res = res &gt;? lst[i];
    }
    return res;
}

///Derived parameters
const time_t D = max(PER);    ///Largest window of inactivity

///Types
typedef int[0,N-1] id_t;
typedef int[-1,K-1] seg_t;    ///The value -1 denotes the absence of a segment
typedef int[0,M-1] m_t;
typedef struct {
    time_t period;
    time_t deadline;
    time_t offset;
    int pri;
    struct {
        time_t c_min;
        time_t c_max;
    } segments[K];
} task_t;
typedef struct {
    seg_t id;
    time_t min;
    time_t max;
} bound_t;
typedef int[0,D] t_val_t;

///Clocks
clock tp;
clock x[M];

///Variables
bool is_starting[N];            ///Indicates whether tasks are still waiting for their offset
int[0,N] queue_len = 0;         
int[0,M] avail_processors = M;
bool is_queued[N];              ///is_queued[i] is true if task i is in the queue
int[-1,N-1] active_c[M];        ///Indiactes whether a clock is observing executions and if so, for which task

///Lists
seg_t ready[N];                 ///Segments that are waiting for a processor
t_val_t period_list[N];         ///Dynamic task periods synced over clock tp
t_val_t offset_list[N];         ///Dynamic task offset synced over clock tp
t_val_t deadline_list[N];       ///Dynamic task deadlines synced over clock tp
bound_t running[M];             ///List of segments that are currently running

///Queue
id_t queue[N];                  ///Ready queue of tasks, ascending in order of priority

///Channels
broadcast chan move;
urgent chan complete[N], run[N];
chan priority run &lt; complete &lt; move;

///Task Parameters
const task_t tasks[N] = 
{
    {200000000, 200000000, 0, 6, {{4402, 6899}, {780, 1436}, {672, 1233}, {4220, 7335}, {277, 771}, {3470, 6279}, {307, 1253}, {377, 587}, {3305, 6145}, {2577, 5372}, {350, 1172}, {440, 2574}, {5135, 10768}, {4100, 10840}, {4687, 7378}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}, 
    {20000000, 20000000, 0, 3, {{2317, 31195}, {37937, 57382}, {11712, 20215}, {215, 1600}, {10590, 18845}, {820, 1732}, {1472, 2638}, {270, 4405}, {4520, 19991}, {337, 1490}, {8672, 16862}, {10847, 53925}, {5642, 8012}, {1827, 10152}, {1175, 2610}, {13287, 47996}, {895, 3485}, {40700, 55547}, {11055, 88182}, {2235, 7212}, {10217, 19067}, {740, 2407}, {14290, 50447}, {420, 1628}, {14895, 30400}, {9555, 18580}, {532, 1787}, {11280, 46347}, {577, 1632}, {22175, 42556}, {105, 932}, {1395, 2067}, {582, 2075}, {265, 640}, {8822, 23060}, {19017, 52542}, {32422, 53162}, {462, 822}, {650, 1098}, {90, 525}, {605, 1157}, {185, 1355}, {34910, 80080}, {1255, 1762}, {4342, 21575}, {642, 1131}, {28642, 40612}, {2775, 12940}, {11827, 24130}, {965, 1987}, {1197, 2747}, {8290, 12042}, {852, 2047}, {32562, 59354}, {265, 837}, {7512, 26397}, {3797, 21828}, {11507, 52167}, {15720, 90898}, {422, 1620}, {842, 1620}, {6990, 43347}, {12070, 29792}, {217, 502}, {1507, 3780}, {19082, 46075}, {37285, 64957}, {815, 1447}, {600, 2677}, {597, 960}, {660, 2185}, {1487, 2962}, {397, 1107}, {632, 2355}, {22127, 60457}, {1717, 15778}, {750, 2056}, {457, 1243}, {1942, 6252}, {905, 1532}, {422, 1467}, {517, 2505}, {187, 637}, {2322, 9976}, {4435, 5842}, {267, 2105}, {230, 2575}, {4492, 27170}, {957, 2290}, {897, 2690}, {2562, 5607}, {6717, 15247}, {485, 878}, {820, 2722}, {2607, 5070}, {1725, 20597}, {630, 1672}, {1137, 1940}, {1285, 3875}, {1350, 2991}, {2532, 5532}, {11997, 23115}, {27642, 46997}, {2947, 21758}, {370, 1935}, {10510, 20258}, {132, 1827}, {6402, 9637}, {295, 996}, {1202, 1972}, {20735, 38930}, {1395, 2633}, {1067, 2482}, {1100, 2090}, {12442, 25912}, {1277, 3220}, {750, 1222}, {217, 2050}, {6445, 16961}, {640, 1107}, {650, 3048}, {487, 1085}, {5042, 57333}, {9315, 42210}, {38767, 58051}, {380, 1022}, {677, 1436}, {1232, 2330}, {3972, 100507}, {215, 348}, {6657, 27940}, {652, 1267}, {1570, 2620}, {5767, 63617}, {17862, 26187}, {6172, 27990}, {532, 1302}, {487, 1222}, {1030, 1463}, {1280, 2307}, {5290, 33165}, {442, 1361}, {8312, 48285}, {965, 2782}, {812, 1587}, {10715, 63531}, {760, 2035}, {6530, 15937}, {1257, 2166}, {160, 2080}, {952, 1887}, {352, 1760}, {357, 2481}, {10595, 35426}, {817, 2338}, {25810, 98110}, {152, 510}, {3615, 24745}, {735, 1007}, {6372, 24137}, {1057, 1862}, {7585, 13818}, {187, 1850}, {9462, 19585}, {3502, 37270}, {962, 2225}, {185, 1617}, {3132, 16745}, {832, 2390}, {462, 1303}, {23117, 38025}, {3592, 32681}, {717, 2656}, {705, 1375}, {525, 1070}, {605, 2666}, {29170, 67791}, {892, 1422}, {707, 2720}, {185, 1395}, {417, 1228}, {650, 1353}, {1145, 2897}, {437, 977}, {1322, 1627}, {620, 1647}, {285, 1903}, {2797, 19322}, {215, 1212}, {8190, 58120}, {4950, 37775}, {460, 1800}, {172, 1511}, {712, 1315}, {395, 1542}, {1690, 2357}, {13712, 52100}, {1210, 1815}, {967, 2010}, {20297, 35410}, {627, 1005}, {500, 1297}, {24505, 44930}, {2480, 3846}, {1427, 2478}, {790, 2058}, {9400, 81775}, {22367, 52432}, {540, 1612}, {937, 1470}, {695, 1817}, {6275, 18461}, {702, 2357}, {1122, 3314}, {26730, 97710}, {1105, 2927}, {287, 2255}, {4035, 13793}, {1255, 2562}, {790, 1530}, {845, 3945}, {750, 2593}, {432, 2782}, {4055, 32995}, {1287, 2500}, {29012, 92387}, {1462, 2860}, {6380, 25395}, {6070, 11315}, {3097, 23733}, {105, 1136}, {657, 1751}, {20130, 50752}, {4342, 18740}, {6555, 28327}, {1122, 9315}, {742, 2980}, {250, 2895}, {12935, 25271}, {240, 815}, {4360, 25373}, {357, 1603}, {3805, 19710}, {725, 1893}, {24492, 41577}, {1195, 2552}, {4737, 11817}, {3965, 7603}, {285, 828}, {4640, 12412}, {97, 212}, {227, 1463}, {682, 2542}, {180, 875}, {34985, 73307}, {9730, 37781}, {3862, 18157}, {3847, 6485}, {357, 861}, {31895, 64870}, {452, 1302}, {942, 2852}, {1300, 1977}, {40, 225}, {10255, 18317}, {882, 1981}, {5097, 33848}, {405, 2710}, {735, 2160}, {8080, 28407}, {30265, 57257}, {29265, 102457}, {352, 1702}, {922, 2775}, {18940, 54401}, {40857, 94035}, {11632, 40727}, {23115, 41190}, {25302, 44117}, {705, 1177}, {865, 2133}, {8080, 13005}, {500, 1801}, {965, 1471}, {5117, 26384}, {5300, 14645}, {3057, 8427}, {9597, 35657}, {1417, 11665}, {12242, 21952}, {11872, 16405}, {8597, 34902}, {477, 2086}, {11402, 52907}, {312, 1960}, {365, 1410}, {8105, 31747}, {27035, 108078}, {617, 1865}, {1267, 2961}, {8840, 10657}, {247, 1115}, {10437, 20337}, {6872, 24268}, {3002, 10297}, {12227, 33835}}}, 
    {50000000, 50000000, 0, 4, {{10690, 23310}, {23362, 70397}, {14080, 20406}, {6520, 8221}, {10065, 19683}, {6092, 13218}, {9267, 19020}, {10375, 23392}, {37952, 70575}, {3622, 4555}, {16955, 45562}, {4205, 11520}, {5692, 14515}, {7910, 29388}, {22840, 73496}, {27717, 51551}, {5925, 25557}, {10805, 21896}, {21247, 29780}, {23950, 35912}, {45900, 98823}, {8285, 17737}, {16345, 31700}, {10007, 22450}, {9372, 31032}, {2820, 12363}, {16810, 47192}, {5280, 17897}, {5642, 24662}, {23295, 53612}, {11557, 23602}, {28637, 55185}, {6067, 12948}, {7825, 31418}, {6880, 10555}, {3957, 9708}, {20037, 38432}, {10432, 40467}, {18607, 47803}, {7800, 26455}, {15882, 28037}, {8745, 28234}, {43210, 104310}, {25637, 54401}, {10947, 33220}, {7817, 29202}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}, 
    {5000000, 5000000, 0, 2, {{11755, 33671}, {4415, 6430}, {3942, 10262}, {1177, 7015}, {6220, 9948}, {47435, 84818}, {1610, 5867}, {7332, 42965}, {2562, 7396}, {7962, 43127}, {17415, 25457}, {3072, 14612}, {3245, 9877}, {18067, 60782}, {2755, 15110}, {427, 1582}, {607, 4948}, {3542, 4467}, {14297, 33570}, {11177, 18667}, {10590, 17855}, {2455, 4565}, {705, 3282}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}, 
    {2000000, 2000000, 0, 1, {{69362, 202070}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}, 
    {100000000, 100000000, 0, 5, {{9047, 15390}, {867, 1877}, {2862, 22393}, {30045, 63150}, {3600, 29206}, {1367, 2422}, {2007, 10283}, {19292, 24578}, {3637, 22557}, {29710, 60746}, {4822, 17236}, {7465, 25202}, {1450, 9803}, {262, 2315}, {37055, 88072}, {892, 1718}, {1637, 3802}, {11587, 26602}, {1122, 2588}, {38392, 48220}, {465, 2647}, {200, 2173}, {4350, 23797}, {797, 1959}, {3625, 9568}, {380, 640}, {58320, 83809}, {682, 2777}, {23542, 99103}, {605, 1327}, {922, 1193}, {222, 1480}, {17370, 38410}, {2492, 6790}, {9420, 31229}, {1487, 3269}, {6490, 10704}, {6777, 59550}, {285, 5655}, {1052, 2410}, {30887, 62408}, {222, 3056}, {1577, 2323}, {582, 2961}, {2532, 32155}, {237, 1687}, {710, 1865}, {602, 1257}, {1635, 3092}, {15697, 29933}, {18787, 48503}, {172, 2015}, {942, 1293}, {21195, 39570}, {1375, 2426}, {13165, 48451}, {137, 1920}, {970, 1515}, {840, 1298}, {30382, 76252}, {7312, 15704}, {885, 2488}, {6497, 31847}, {312, 1285}, {1252, 2205}, {1610, 2608}, {1490, 2027}, {827, 1186}, {1997, 17467}, {182, 1207}, {5367, 94057}, {8390, 48690}, {567, 1407}, {800, 1415}, {8012, 12057}, {20682, 155292}, {7702, 22845}, {302, 1483}, {14067, 33520}, {235, 485}, {1117, 2057}, {1077, 3067}, {5855, 14077}, {5872, 60457}, {1137, 2025}, {840, 1303}, {232, 1428}, {105, 878}, {257, 2112}, {767, 2195}, {16647, 44780}, {215, 1580}, {19497, 32338}, {655, 2485}, {39955, 56620}, {232, 592}, {1370, 3378}, {8380, 34572}, {2927, 18647}, {862, 2336}, {2537, 3732}, {1120, 1841}, {1057, 1650}, {1032, 2898}, {35822, 75998}, {942, 1652}, {100, 465}, {12195, 31332}, {1552, 4275}, {647, 1988}, {897, 2487}, {212, 998}, {202, 1557}, {11597, 28477}, {380, 2115}, {1067, 1765}, {480, 702}, {23007, 48633}, {24120, 45746}, {5830, 52610}, {307, 2946}, {1405, 1982}, {80, 342}, {12405, 47412}, {275, 927}, {2642, 26971}, {702, 1346}, {4445, 52690}, {5155, 20571}, {36320, 65207}, {1360, 9237}, {692, 1635}, {1190, 2260}, {19717, 43628}, {36752, 81386}, {1447, 2953}, {225, 2457}, {500, 2120}, {347, 2366}, {1262, 2902}, {437, 662}, {1460, 3401}, {512, 1837}, {1775, 3430}, {580, 1075}, {11822, 23761}, {5000, 11207}, {13365, 40362}, {10515, 24268}, {9422, 72866}, {1020, 2304}, {1037, 2450}, {1262, 2167}, {10730, 38859}, {6187, 24013}, {21212, 27793}, {1300, 2330}, {1272, 3041}, {60, 697}, {1155, 2305}, {190, 2411}, {1065, 1990}, {1145, 15257}, {2762, 6520}, {625, 1638}, {6650, 13513}, {1565, 15588}, {97, 186}, {17687, 44392}, {1887, 14951}, {4280, 17188}, {982, 1663}, {9935, 33542}, {652, 1972}, {19795, 49964}, {97, 1085}, {2987, 34457}, {1180, 2437}, {4052, 13831}, {762, 3488}, {400, 1430}, {6972, 81552}, {14272, 30475}, {1755, 2058}, {1370, 5050}, {655, 4867}, {19102, 43710}, {1700, 2411}, {2240, 4178}, {5620, 7110}, {30750, 99437}, {2725, 6077}, {510, 2655}, {21332, 38565}, {140, 1148}, {9515, 18797}, {895, 2806}, {1275, 3005}, {592, 2852}, {392, 2446}, {1785, 16487}, {3937, 48439}, {13857, 71197}, {1900, 23137}, {122, 1558}, {1077, 2535}, {1237, 1947}, {7662, 46692}, {4947, 14739}, {27862, 77846}, {2245, 3900}, {1265, 1666}, {6927, 57475}, {3170, 20592}, {3060, 13728}, {320, 2327}, {415, 2287}, {507, 3861}, {1290, 1625}, {2042, 43627}, {1172, 1950}, {4927, 33505}, {9322, 69218}, {15925, 31260}, {26420, 90690}, {412, 1688}, {390, 1468}, {805, 2210}, {82, 998}, {207, 1060}, {397, 2853}, {395, 619}, {6030, 47953}, {812, 1947}, {810, 1626}, {897, 3305}, {14207, 43270}, {1117, 3557}, {1357, 10002}, {16085, 26492}, {12047, 67426}, {16400, 51082}, {992, 3417}, {1065, 1874}, {45797, 53367}, {38467, 51833}, {22377, 80937}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}, 
    {1000000000, 1000000000, 0, 7, {{495, 938}, {797, 1987}, {802, 1397}, {665, 1587}, {1027, 1880}, {827, 1800}, {1087, 1605}, {1157, 1807}, {555, 981}, {790, 1533}, {647, 965}, {952, 2097}, {830, 2086}, {455, 1080}, {882, 2163}, {445, 787}, {1055, 2370}, {825, 1486}, {407, 781}, {790, 4165}, {617, 966}, {515, 1222}, {852, 1984}, {925, 1295}, {747, 1268}, {717, 1177}, {532, 1180}, {832, 1485}, {1010, 1927}, {1152, 2447}, {912, 2177}, {910, 2328}, {807, 1697}, {572, 1433}, {457, 864}, {807, 1738}, {580, 1037}, {825, 1968}, {445, 932}, {797, 1177}, {652, 1502}, {965, 1478}, {972, 1555}, {922, 1372}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}, {0, 0}}}
};

///Functions
///Synchronises offsets and periods using update
void update_all(const t_val_t update)
{
    for(i : id_t)
    {
        if(is_starting[i])
        {
            offset_list[i] = offset_list[i] - update;
        }
        else
        {
            period_list[i] = period_list[i] - update;
            deadline_list[i] = deadline_list[i] - update;
        }
    }
}

///Synchronises offsets and periods using update followed by reseting task id's period to its inital value
void reset_and_update(const id_t id, const t_val_t period)
{
    update_all(period);
    period_list[id] = tasks[id].period;
    deadline_list[id] = tasks[id].deadline;
}

///Returns the task id at the head of queue
id_t front() {
    return queue[0];
}

///Enqueue task id into queue
void enqueue(const id_t id) {
    int tmp;
    if(!is_queued[id])
    {
        queue[queue_len++] = id;
        is_queued[id] = true;
        if (queue_len &gt; 0) {
            int i = queue_len - 1;
            while (i &gt;= 1 &amp;&amp; tasks[queue[i]].pri &lt; tasks[queue[i - 1]].pri) {
                tmp = queue[i - 1];
                queue[i - 1] = queue[i];
                queue[i] = tmp;
                i--;
            }
        }
    }
}

///Dequeue task id from the queue
void dequeue() {
    int i;
    const id_t head = front();
    if(ready[head] == -1)
    {
        is_queued[head] = false;
        queue_len -= 1;
        while (i &lt; queue_len)
        {
            queue[i] = queue[i + 1];
            i++;
        }
        queue[i] = 0;
    }
}

bool job_ready() {
    return exists(i : id_t) ready[i] &gt; -1;
}

bool processor_avail() {
    return avail_processors &gt; 0;
}

///Asserts whether clock clk is currently observing an execution cluster of task id
bool is_observing_c(const m_t clk, const id_t id)
{
    return active_c[clk] == id;
}

time_t c_min(const id_t id, const seg_t seg_id) {
    return tasks[id].segments[seg_id].c_min;
}

time_t c_max(const id_t id, const seg_t seg_id) {
    return tasks[id].segments[seg_id].c_max;
}

///Initialises lists and queues
void init_lists()
{
    const bound_t fresh_c = {-1,0,D};
    for(i : id_t) 
    {
        ready[i] = -1;
        is_starting[i] = true;

        period_list[i] = tasks[i].period;     
        offset_list[i] = tasks[i].offset;     
        deadline_list[i] = tasks[i].deadline; 
    }
    for(i : m_t)
    {
        active_c[i] = -1;
        running[i] = fresh_c;
    }
}

void ready_add(const id_t id, const seg_t seg_id)
{
    ready[id] = seg_id;
}

///Adds segment seg_id into the running list at index clk
void running_add(const m_t clk, const id_t id, const seg_t seg_id)
{
    const bound_t seg = {seg_id,c_min(id,seg_id),c_max(id,seg_id)};
    running[clk] = seg;
}

void clear_ready(const id_t id)
{
    ready[id] = -1;
}

///Remove segment seg_id from the running list
void running_remove(const m_t clk)
{
    const bound_t fresh = {-1, 0, D};
    running[clk] = fresh;
}

///Checkers whether a segment is found at index in the ready list of task id
bool can_run(const id_t id)
{
    return ready[id] &gt; -1;
}

///Starts a segment
void begin_segment(const id_t id, const m_t clk)
{
    seg_t seg = ready[id];
    active_c[clk] = id;
    clear_ready(id);
    running_add(clk,id,seg);
}

///Finds the first available clock
m_t find_first()
{
    m_t res;
    while(running[res].id &gt; -1 &amp;&amp; res &lt; M-1)
    {
        res++;
    }
    return res;
}

///Checks whether the clock is the first available in x
bool is_next(const m_t clk)
{
    return clk == find_first();   
}</declaration>
	<template>
		<name>Scheduler</name>
		<declaration>id_t tmp_i;
bound_t tmp_seg;

void reset_tmps()
{
    const bound_t fresh = {-1,0,0};
    tmp_i = 0;
    tmp_seg = fresh;
}

bool has_successor()
{
    if(tmp_seg.id &lt; K-1)
    {
        return tasks[tmp_i].segments[tmp_seg.id+1].c_min &gt; 0;
    }
    return false;
}

void finish_segment()
{
    if(has_successor())
    {
        ready_add(tmp_i,tmp_seg.id+1);
    }
    reset_tmps();
    ++avail_processors;
}

bool is_free(const m_t clk)
{    
    return active_c[clk] == -1;   
}</declaration>
		<location id="id0" x="-1581" y="-527">
			<label kind="invariant" x="-1572" y="-518">forall(i : m_t)
x[i] &lt;= running[i].max</label>
		</location>
		<location id="id1" x="-1887" y="-493">
			<committed/>
		</location>
		<location id="id2" x="-1887" y="-731">
			<committed/>
		</location>
		<init ref="id1"/>
		<transition id="id3">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="select" x="-2142" y="-671">i:id_t, j:m_t</label>
			<label kind="guard" x="-2346" y="-654">is_observing_c(j,i) &amp;&amp; x[j] == running[j].max</label>
			<label kind="synchronisation" x="-2023" y="-671">move!</label>
			<label kind="assignment" x="-2354" y="-637">tmp_i = i, active_c[j] = -1, tmp_seg = running[j], running_remove(j)</label>
			<nail x="-1853" y="-612"/>
			<nail x="-2363" y="-612"/>
			<nail x="-2363" y="-680"/>
			<nail x="-1887" y="-680"/>
		</transition>
		<transition id="id4">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-1487" y="-807">job_ready() &amp;&amp;
processor_avail()</label>
			<label kind="synchronisation" x="-1487" y="-756">run[front()]!</label>
			<label kind="assignment" x="-1496" y="-773">--avail_processors</label>
			<nail x="-1513" y="-731"/>
			<nail x="-1343" y="-731"/>
		</transition>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="-1428" y="-595">i:m_t</label>
			<label kind="guard" x="-1436" y="-578">is_free(i) &amp;&amp;
x[i] == running[i].max</label>
			<label kind="assignment" x="-1436" y="-544">x[i] := 0</label>
			<nail x="-1445" y="-527"/>
			<nail x="-1445" y="-561"/>
		</transition>
		<transition id="id6">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-1725" y="-680">has_successor()</label>
			<label kind="assignment" x="-1725" y="-663">enqueue(tmp_i),
finish_segment()</label>
			<nail x="-1683" y="-595"/>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id0"/>
			<label kind="guard" x="-1802" y="-790">!has_successor()</label>
			<label kind="synchronisation" x="-1802" y="-773">complete[tmp_i]!</label>
			<label kind="assignment" x="-1802" y="-756">finish_segment()</label>
			<nail x="-1581" y="-731"/>
		</transition>
		<transition id="id8">
			<source ref="id0"/>
			<target ref="id2"/>
			<label kind="select" x="-2201" y="-586">i:id_t, j:m_t</label>
			<label kind="guard" x="-2380" y="-569">is_observing_c(j,i) &amp;&amp; x[j] &gt;= running[j].min</label>
			<label kind="assignment" x="-2380" y="-552">tmp_i = i, active_c[j] = -1, tmp_seg = running[j], running_remove(j)</label>
			<nail x="-2397" y="-527"/>
			<nail x="-2397" y="-731"/>
			<nail x="-1955" y="-731"/>
		</transition>
		<transition id="id9">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="assignment" x="-1785" y="-493">init_lists()</label>
			<nail x="-1598" y="-493"/>
		</transition>
	</template>
	<template>
		<name>Task</name>
		<parameter>const id_t id</parameter>
		<declaration>clock response;

t_val_t period() {
    return period_list[id];
}

t_val_t offset() {
    return offset_list[id];
}

t_val_t deadline() {
    return deadline_list[id];
}</declaration>
		<location id="id10" x="-1071" y="-595">
			<name x="-1062" y="-629">Active</name>
		</location>
		<location id="id11" x="-1071" y="-289">
			<name x="-1045" y="-314">Offsetting</name>
			<label kind="invariant" x="-1056" y="-296">tp &lt;= offset()</label>
		</location>
		<location id="id12" x="-799" y="-595">
			<name x="-782" y="-612">Waiting</name>
			<label kind="invariant" x="-824" y="-578">tp &lt;= period()</label>
		</location>
		<init ref="id11"/>
		<transition id="id13">
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="guard" x="-1020" y="-782">tp == period()</label>
			<label kind="synchronisation" x="-1020" y="-799">move!</label>
			<label kind="assignment" x="-1020" y="-765">tp = 0,
reset_and_update(id,period()),
ready_add(id,0),
enqueue(id),
response := 0</label>
			<nail x="-799" y="-663"/>
			<nail x="-1071" y="-663"/>
		</transition>
		<transition id="id14">
			<source ref="id10"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-986" y="-620">complete[id]?</label>
		</transition>
		<transition id="id15">
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="guard" x="-1062" y="-518">tp == offset()</label>
			<label kind="synchronisation" x="-1062" y="-501">move!</label>
			<label kind="assignment" x="-1062" y="-484">tp := 0,
update_all(offset()),
is_starting[id] = 0,
ready_add(id,0),
enqueue(id),
response := 0</label>
			<nail x="-1071" y="-340"/>
			<nail x="-1071" y="-527"/>
		</transition>
		<transition id="id16">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="select" x="-1530" y="-646">j:m_t</label>
			<label kind="guard" x="-1530" y="-629">can_run(id) &amp;&amp;
is_next(j)</label>
			<label kind="synchronisation" x="-1530" y="-527">run[id]?</label>
			<label kind="assignment" x="-1530" y="-586">begin_segment(id,j),
dequeue(),
x[j] := 0</label>
			<nail x="-1343" y="-493"/>
			<nail x="-1343" y="-663"/>
		</transition>
	</template>
	<system>system Scheduler, Task;
</system>
	<queries>
		<query>
			<formula>E&lt;&gt; exists(i : id_t) Task(i).Active &amp;&amp; tp &gt; Task(i).deadline()</formula>
			<comment/>
			<result outcome="failure" type="quality" timestamp="2024-09-21 00:32:28 +0200">
			</result>
		</query>
		<query>
			<formula>sup{Task(0).Active}: Task(0).response</formula>
			<comment/>
			<result outcome="success" type="quantity" value="1.45528e+07" timestamp="2024-09-16 13:34:38 +0200">
				<details>1.45528e+07</details>
			</result>
		</query>
		<query>
			<formula>inf{Task(0).Waiting}: Task(0).response</formula>
			<comment/>
			<result outcome="success" type="quantity" value="4.43034e+06" timestamp="2024-09-16 13:37:54 +0200">
				<details>4.43034e+06</details>
			</result>
		</query>
	</queries>
</nta>
